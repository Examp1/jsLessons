"use strict";
// Какое будет выведено значение: let x = 5; alert( x++ ); ? -

// Чему равно такое выражение: [ ] + false - null + true ? +

// Что выведет этот код: let y = 1; let x = y = 2; alert(x); ? +

// Чему равна сумма [ ] + 1 + 2? -

// Что выведет этот код: alert( "1"[0] )? -

// Чему равно 2 && 1 && null && 0 && undefined ? -

// Есть ли разница между выражениями? !!( a && b ) и (a && b)?

// Что выведет этот код: alert( null || 2 && 3 || 4 ); ?

// a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ? +

// Что выведет этот код: alert( +"Infinity" ); ? -

// Верно ли сравнение: "Ёжик" > "яблоко"?

// Чему равно 0 || "" || 2 || undefined || true || falsе ?


//1)

// let x = 5; 
// alert( ++x ); // 6
// alert( x++ ); //5 
// если инкримент префиксный сначал идет вывод переменной потом добавление +1 , если потсфиксный то добавление а потом вывод

// 2)

console.log([ ] + false - null + true); // nan

// 3)

// let y = 1;
// let x = y = 2;
// alert(x); //2

console.log([ ] + 1 + 2); // string

// 4)
// alert( "1"[0] ); // 1

console.log(2 && 1 && null && 0 && undefined ); 

// 5)
//!!( a && b ) и (a && b) da

let a = [1, 2, 3], b = [1, 2, 3];

console.log(a == b);

alert( +"Infinity" );

console.log("Ёжик" > "яблоко");

console.log(0 || "" || 2 || undefined || true || falsе);

// разбор

// 1
// если инкримент или декримент префиксный (++x) то будет добавление потом вывод если постфиксный (х++) то вывод пото добавление

// 2
// [ ] + false - null + true

// console.log([] + false); // string 

// если работаес пустом масивом то он будте строчныи [] преобразовывается в "" 

// console.log([] + false - null + true); // nan

// 3 

// let y = 1; 
// let x = y = 2; вот тут делаеться с права на лево тоесть у = 2 потом х = у
// alert(x); //2

// 4 

// console.log([] + 1 + 2); // выходит строка 12 (пустая строка + 1 + 2) = 12

// 5

// console.log( "1"[0] ); // тут мы обращаемся к строке по индексу тоесть к 1му символу, из-за того что у нас строка состоит из 1го символа он и выведится 

// 6
//2 && 1 && null && 0 && undefined 

// console.log(2 && 1 && null && 0 && undefined );  // оператор и (&&) всегда запианеться на лжи (false) из-за того что null = false условие там и закончиться и результат будет null
// console.log(2 && 1 &&  undefined && 0 && null); // а тут undefind
// console.log(2 && 1 && 0 && undefined && null); // тут 0

// И ЗАПИНАЕТЬСЯ НА ЛЖИ
// ИЛИ ЗАПИНАЕТЬСЯ НА ПРАВДЕ
// 6 
// console.log(!!( 5 && 2 ) === (5 && 2)); // будет false из-за того что !! 2 знака превращают тип данных в bollean


// 7
//  приоритет выполнение
//      2         1     3 
// console.log( null || 2 && 3 || 4 );

// 8

// const a1 = [1, 2, 3],
//       b2 = [1, 2, 3];

// не равны из-за того что это 2 разных масива . 2 разных хранилищя которые хранят одинаковые данные

// 9
// alert( +"Infinity" );

// 10

// console.log("Ёжик" > "яблоко");  // если сравниваем строки у нас идет посимвольное сравнение


// 11
// console.log( 0 || "" || 2 || undefined || true || falsе);
// || или запинаеться на true в выражении есть 2 true это "2" и "true"  "2" идет перьвее там условие и запнеться 